Kubernetes

Container Orchestration plateform that automates  deployment

Pradeep Kumar
9:06 PM
---------------------------DOCKER CONTAINERS ---------------------------------------------

Docker is a platform which provides Containerization

What is Containerization?
It is a process of creating Containers

Why do we need DOCKER CONTAINERS:-
TO run our applications -> Run/creating images, containers

------------------------------ KUBERNETES PODS --------------------------------------------

What is KUBERNETES?
It is a Container Orchestration platform that Automates deployment of Containers
------------------------------ ADVANTAGES/REALTIME APPLICATIONS of KUBERNETES -------------------------------

KUBERNETES ADMINISTRATOR/DEVELOPER

GOOGLE Team is working on different solutions for managing the PRODUCTION level CONTAINERS/PODS/CLUSTERS

KUBERNETES -> ORGANIZATION (PRODUCT)

PROBLEMS which we may face using DOCKER CONTAINERS: -
1. Auto Scaling -> Increasing or Decreasing number of CONTAINERS/PODS based on the DEMAND from the Customers
2. Auto Healing -> If Container dies, it should revive Automatically, using REPLICA SETS
3. LOAD BALANCER -> Equally distributing the Traffic across different Containers
4. ENTERPRISE LEVEL Solution -> Docker do not provide ENTERPRISE level solutions
-> KUBENETES is Free 
-> AZURE KUBERNETES Service (AKS)
-> Elastic Kubernetes Service (EKS) available in AWS
-> FIREWALLS, Security 


Pradeep Kumar
9:05 PM
How do we AUTO SCALE ?

HORIZONTAL POD Auto scaling : -
-> You increase/decrease the number of PODS 
-> Minimum number of REPLICAS/PODS and Maximum number of REPLICAS/PODS

What is difference between POD and REPLICA Set ?
-> POD is the actually a Container and REPLICA set is a copy of a POD

Cluster level Auto scaling: -
Based on number of worker nodes

-> No of worker nodes
-> Maximum capacity of your worker nodes (8GB RAM and 30 GB)
-> Maximum capacity used by your worker node (6gb and 25GB)
-------------------------------------- KUBERNETES ARCHITECTURE  --------------------------------------

Data Plane or Worker Nodes : -
-> Kubelet : Responsible for creating and running the PODS and it informs Control plane if a POD is not available
-> Kube-proxy : Responsible for assigning the IP address and it diverts the traffic through LOAD Balancers for PODS
-> PODS : One or more COntainers make a POD


Control Plane or Master Node
-> API server: Decides on which Worker node the PODS should
-> Scheduler : It will schedule the PODS creation
-> ETCD : Entire cluster information is stored in Key-value pair format


KOP: Kubernetes opertions used for creating clusters on the cloud

KubeCTL: usered ot configuration of the cluster, pODS, tbshoot and service

Minikube:
used for local kubernetes cluster creation. Single node clusters



Pradeep Kumar
9:04 PM
What is KOPS ?
Kubernetes Operations.
-> It is a 3rd party tool
-> Creation of Kubernetes clusters on CLOUD

What is MINIKUBE ?
-> Used for local Kubernetes cluster creation 
-> Single node clusters on your local machine
-> Only one EC2 instance or you can install on your LAPTOP

What is KubeCTL ?
-> It is used for Configuration of the CLusters
-> We can create PODS, services, troubleshoot
FIRST APPROACH : -
-> Create an EC2 instance and install Kubernetes on EC2 using any of the above tools
-> IF something goes wrong, AMAZON will not provide the support for Kubernetes
-> This is Cost efficient
-> Timelines are not stringent/short for fixing the error

LINUX DISRIBUTIONS: -
Amazon Linux Distributions
Redhat
CentOS
SECOND APPROACH is KUBENERNETES DISTRIBUTIONS: -
Kubernetes is an OPENSOURCE TOOL: -
-> EKS (Elastic Kubernetes Ser
-> RANCHER 
-> Timelines are stringent/short forvice) -> AWS will provide the servers/machines with already installing Kubernetes
-> AKS (Azure Kubernetes Service)
-> Openshift
-> Tanzu fixing the error
-> IN DOcker, we have CONTAINERS as the Lowest level deployment
-> In K8s, we have PODS as lowest level of deployment

-> One or more containers make a POD
-> We have YAML file in k8s, for creating PODS 

POD.yml
-> Your containername
-> Your image name
-> Your image port number
-> Base image details


-------------------------------------------------------------------------------------------------------------

Create a POD using 2 containers 

-> Shared networking
-> shared storage



Running local CLuster

Pradeep Kumar
9:02 PM
STEP-1 : - Update the Ubuntu OS and switch to root user
-> sudo apt update
-> sudo -i

STEP-2 : Install Docker
  sudo apt -y install docker.io
STEP-3 : Install Kubernetes packages
  -> curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl && chmod +x ./kubectl && sudo mv ./kubectl /usr/local/bin/kubectl
  -> curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
  -> apt install conntrack
STEP-4 : Add the current user to the docker group and start a new shell with the updated group membership.
-> sudo usermod -aG docker $USER && newgrp docker

STEP-5 : Start Minikube  
-> minikube start --driver=docker
Pradeep Kumar
9:06 PM
STEP-6 : Deploy a pod with the react todolist app image
  kubectl run todolistapp --image=kubekode/react-todo-list-app

  Pradeep Kumar
9:07 PM
STEP -7 : Deploy a NodePort service for this pod.
  kubectl expose pod todolistapp --type=NodePort --port=80 --name=todolistapp-service

STEP - 8 : Check service is working or not
  minikube service todolistapp-service --url

STEP - 9 : Request the URL using curl to check it's working or not.
  curl <URL>

  STEP -10 :  Forward the traffic from 3000 port to 80 port on our pod.
  
  
  
   Add port 3000 in security groups if you face any error







Commands
 1  minikube start --driver=docker
    2  minikube status
    3  history
ubuntu@ip-172-31-21-85:~$ sudo su
root@ip-172-31-21-85:/home/ubuntu# history
    1  minikube start --driver=docker
    2  exit
    3  curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl && chmod +x ./kubectl && sudo mv ./kubectl /usr/local/bin/kubectl
    4  curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
    5  apt install conntrack
    6  sudo usermod -aG docker $USER && newgrp docker
    7  rxit
    8  whoami
    9  exit
   10  history

    1  minikube status
    2  docker ps
    3  kubectl run todolistapp --image=kubekode/react-todo-list-app
    4  kubectl expose pod todolistapp --type=NodePort --port=80 --name=todolistapp-service
    5  minikube service todolistapp-service --url
    6  kubectl port-forward svc/todolistapp-service 3000:80 --address 0.0.0.0 &
    7  docker ps
    8  docker images
    9  history

