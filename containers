Docker: Open source tool used to create containers

Container: software/code user to package applications

JAR File problem
Using MAven we create JAR file (Application code) but not the environment

Why do we need containers
Scalable, fast and easy to manage, Portability

Monolithic -> Multiple servuice running on a single server
Micro service ->  Multiple service running on multiple services

Containers can be used as servers


Docker Architecture

CLIENT - Build Pull Run

DOCKER HOST - Docker Daemon (container and image)

REGISTRY  - House all docker images


STEPS
    1. create a container using an base image (ubuntu/amazonlinux/macos)
        docker pull ubuntu (Pull image from docker hub)
        docker run container-name (create container using the pulled image)

    2. Install the required pacakages inside the container
        install mvn
        install git
        install my-sql
        install apache

    3. Run the application inside the container
        run the application

    4. Create a project image using the container image (Backup)
        docker commit container-name

    5. Create another copy of the container-backup using the project-image



-install docker on ec2... yum install docker
-Start docker ..systemctl start docker
- You can check teh status after starting ..systemctl status docker
-Pull the base image .....docker pull ubuntu
- Create container ---docker run -it --name container1 ubuntu _. this gets you into the container
update teh container --apt update
    isnatl the package ---apt install git,apt install maven, apt install apache2, sudo apt install openjdk-11-jdk
    -> apt update -y
            -> apt install git -y
            -> apt install maven -y
            -> apt install openjdk-11-jdk -y
            -> apt install apache2 -y
            -> apt install mysql-server -y
            -> apt install python3 -y

docker start container id  >>> to start a containerker stop


Use  Ctrl PQ to step out of container

Create a docker image with a container 
-docker commit container2 project-image
docker 

REMOTE into a docker container : -docker exec -it container2 bash
docker ps
docker stop container2


DOCKERFILE

Creating a sample WEB-server using the DOCKERFILE
1. index.html > Create a webpage
2. create a DOCKERFILE  
    confg the dockerfile with tools to run the webserver
3. Build docker image
4. 


FROM ubutu/amazonlinux
RUN apt update -y
RUN apt install git -y
RUN apt install apache2 -y
RUN apt install python3 -y
RUN apt install mysql-server
RUN apt install maven


yum install docker
2  mkdir project1
3  cd project1/
4  touch Dockerfile
5  vi Dockerfile 
6  ls
7  systemctl start docker.service 
8  systemctl status docker.service 
9  docker images
10  docker ps
11  ll
12  docker build -t image1 .
13  docker images
14  vi Dockerfile 
15  docker build -t image1 .
16  docker images
17  docker run it --first image1
18  docker run it --first ca0631572f5c
19  docker run -it --container23 image1
20  docker run -it container23 image1
21  docker run -it --name container23 image1



Creating Docker image using Dockerfile

we can use docker images for WEB APPS, NETFLIX APP, APP + DB, Mobile APP 

Steps

Create EC@ instance , install docker
create a project directory
pull a base image (web-ser >apache/ngnx)
index.html  > the html code
create docker file 
Create the docker image and run image



Micro service project in docker  https://github.com/pradeepV2/MicroServicesProject

Microservice project

CREATE 3 SERVER AND MAKE A SWARM OUT OF IT BY INSTALLING DOCKER ON ALL, OPEN PORT 2377 AND RUNNING THE BELOW DOCKER COMMANDS

docker swarm init >>> creating a cluster and making the server a master 
add --advertise-addr 18.221.11.7 to specify the server you wnat to use as master

Port 2377 must be open for docker swarm

docker swarm join --token SWMTKN-1-5aaklafw39yq8ne7abynaa9pxm995b8c8w21frazxfo69cszua-bofbymmhqoydh3qhlq82djhs5 18.221.11.7:2377

To generate the join token

docker swarm join-token --rotate worker  >>>Successfully rotated worker join token

docker swarm join-token worker >>>>To add a worker to this swarm, run the following command:


    STEPS:

        STEP 1: -
            Create 3 instances 
            
            STEP 2: -
            Install Docker in all the 3 instances and Start the docker service
            
            STEP 3: -
            Select any one EC2 and Initialize it as MASTER node using DOCKER SWARM
            
            
            STEP 4: -
            Add the other two EC2 instances as SLAVE NODES in the CLUSTER using Docker Swarm
            
            
            STEP 5: -
            Install JENKINS and the other required packages on the MASTER NODE
            STEP 6: -
            TRIVY INSTALLATION is for scanning the code before we upload the image to docker hub
            
            
            STEP 7: -
            Create a Dockerfile and write the STEPS for downloading base images
            
            
            STEP 8: -
            Create an index.html file
            
            STEP 9: -
            Manually create images for different services and upload them to DOCKERHUB
            
            a) Create image for movies service -> docker build -t movies:v1 .
            
            b) Create image for DTH service -> docker build -t dth:v1 .

    Continue with deploying docker conatiner to the DOCKERHUB

    voltairejojo
    
    docker login --username voltairejojo --password Started@123  ... Login to docker
    docker tag jojopay:v1 voltairejojo/jojopay    ...Tag the image with yoru docker username
    docker push voltairejojo/jojopay    .... push the tagged image 


Commands
1  systemctl start docker
2  docker node ls
3  docker swarm join-token worker
4  docker node ls
5  docker node ls
6  GIT --VERSION
7  LS
8  ls
9  yum install git java-1.8.0-openjdk maven -y
10  sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
11  sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
12  amazon-linux-extras install java-openjdk11 -y
13  yum install jenkins -y
14  update-alternatives --config java
15  systemctl start jenkins.service
16  systemctl status jenkins.service
17  wget https://github.com/aquasecurity/trivy/releases/download/v0.18.3/trivy_0.18.3_Linux-64bit.tar.gz
18  tar zxvf trivy_0.18.3_Linux-64bit.tar.gz
19  sudo mv trivy /usr/local/bin/
20  vim .bashrc
21  source .bashrc 
22  vi DOckerfile
23  vi Dockerfile
24  ls
25  rm DOckerfile 
26  ls
27  vi index.html
28  ll
29  docker build -t movies:v1 .
30  docker images
31  docker run -itd --name cont1 -p 81:80 movies:v1
32  histoty
33  history
34  docker ps -a
35  docker build -t dth:v1 .
36  docker images
37  docker run -itd --name cont2 -p 81:80 dth:v1
38  docker run -itd --name cont2 -p 82:80 dth:v1
39  docker run -itd --name cont3 -p 82:80 dth:v1
40  docker ps -a
41  history
41  history
   42  shutdown -h now
   43  systemctl start docker
   44  docker node ls
45  docker images
46  docker ps 
47  docker ps -a
48  docker start a6f116fc60a7
49  docker ps
50  docker start a52f430454f2 
51  docker ps
52  docker ps
53  docker remove 3e23b70869da
54  docker ps -a
55  docker login
56  docker login
57  ls
58  docker login --username voltairejojo
59  docker login --username voltairejojo --password Started@123
60  docker login --username voltairejojo --password-stdin Started@123
61  docker images
62  docker ps
63  ls
64  vi index.html 
65  docker run -itd --name conta1 -p 83:80 jojpay:v1 
66  docker build -t jojopay:v1
67  docker build -t jojopay:v1 .
68  docker run -itd --name conta1 -p 83:80 jojopay:v1 
69  docker ps
70  docker images
71  docker tag jojopay:v1 voltairejojo/jojopay
72  docker images
73  docker push voltairejojo/jojopay
74  docker tag movies:v1 voltairejojo/movies
75  docker push voltairejojo/movies
76  history










